<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits and Bytes]]></title>
  <link href="http://liaowang11.github.com/atom.xml" rel="self"/>
  <link href="http://liaowang11.github.com/"/>
  <updated>2013-03-26T01:03:53+08:00</updated>
  <id>http://liaowang11.github.com/</id>
  <author>
    <name><![CDATA[wliao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diving Into Damai.cn-Part1]]></title>
    <link href="http://liaowang11.github.com/blog/2013/03/25/diving-into-damai-dot-cn-part1/"/>
    <updated>2013-03-25T18:29:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/03/25/diving-into-damai-dot-cn-part1</id>
    <content type="html"><![CDATA[<p>这几天花了些时间来研究大麦购票的流程，虽然现在也没啥意义。下面仅当记录和分享用。</p>

<h2>方法</h2>

<p>为了实现automated qiangpiao（好高级的英文），我们需要了解整个流程，而不是<a href="http://wliao.name/blog/2013/03/19/just-love-mayday/">简单的到选座的网站</a>就OK了。但是选座是用ActionScript写的，所以这里就有两个选择了。</p>

<ol>
<li>嗅探（Sniff不知道算不算）客户端与服务器端通信（HTTP协议）的内容，然后连蒙带猜搞懂流程和数据。</li>
<li>反编译Flash，分析代码。</li>
</ol>


<p>这个Post说的是第一种，第二种请见Part2。</p>

<h2>工具</h2>

<p>刚开始很困惑用什么工具来进行嗅探。Chrome Developer Tools 只能显示页面的请求和回复，而tcpdump貌似又有点太<del>高端</del>底层了。</p>

<p>最近无意间想起了BackTrace上的<a href="http://portswigger.net/burp/">burp suite</a>，这可是传说中的神器，而且还能跨平台。详细使用就读它的<a href="http://portswigger.net/burp/help/">help</a>吧。我使用的Free版本的，够用就行。Win$ 32bit下的孩子可以去找那个啥版本的（你懂的）。</p>

<p><img src="http://liaowang11.github.com/images/burpfordamai.png" alt="Burp to Sniff Damai" /></p>

<h2>流程</h2>

<p>如下的流程都是用Burp的Interrupt On模式分析所得，动手是最快的熟悉方法。</p>

<div id="xuanzuo_flow" style="margin:auto"></div>


<h2>数据</h2>

<blockquote><p>&#8220;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&#8221;</p><footer><strong>Linus Torvalds</strong> <cite><a href='http://lwn.net/Articles/193245/'>Good Programmer, Bad Programmer</a></cite></footer></blockquote>


<h3>standlist.xml</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;root</span> <span class="na">rs=</span><span class="s">&quot;StandImage/852/177988/performbg.jpg&quot;</span> <span class="na">fbg=</span><span class="s">&quot;&quot;</span> <span class="na">snb=</span><span class="s">&quot;1&quot;</span> <span class="na">vn=</span><span class="s">&quot;ä¸äºè¾¾ä¸­å¿ï¼åäºæ£µæ¾ä½è²é¦ï¼&quot;</span> <span class="na">pfid=</span><span class="s">&quot;177988&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;prices&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343056&quot;</span> <span class="na">c=</span><span class="s">&quot;F91616&quot;</span> <span class="na">dn=</span><span class="s">&quot;1280&quot;</span> <span class="na">p=</span><span class="s">&quot;1280.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343057&quot;</span> <span class="na">c=</span><span class="s">&quot;EF8686&quot;</span> <span class="na">dn=</span><span class="s">&quot;880&quot;</span> <span class="na">p=</span><span class="s">&quot;880.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343058&quot;</span> <span class="na">c=</span><span class="s">&quot;8686FF&quot;</span> <span class="na">dn=</span><span class="s">&quot;680å¥ç¥¨åº&quot;</span> <span class="na">p=</span><span class="s">&quot;680.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;345793&quot;</span> <span class="na">c=</span><span class="s">&quot;EAAE33&quot;</span> <span class="na">dn=</span><span class="s">&quot;680&quot;</span> <span class="na">p=</span><span class="s">&quot;680.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343059&quot;</span> <span class="na">c=</span><span class="s">&quot;8ac4e3&quot;</span> <span class="na">dn=</span><span class="s">&quot;480&quot;</span> <span class="na">p=</span><span class="s">&quot;480.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343060&quot;</span> <span class="na">c=</span><span class="s">&quot;bf6aa2&quot;</span> <span class="na">dn=</span><span class="s">&quot;280&quot;</span> <span class="na">p=</span><span class="s">&quot;280.00&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/prices&gt;</span>
</span><span class='line'><span class="nt">&lt;AllPrice&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343056&quot;</span> <span class="na">c=</span><span class="s">&quot;F91616&quot;</span> <span class="na">dn=</span><span class="s">&quot;1280&quot;</span> <span class="na">p=</span><span class="s">&quot;1280.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;954555&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343057&quot;</span> <span class="na">c=</span><span class="s">&quot;EF8686&quot;</span> <span class="na">dn=</span><span class="s">&quot;880&quot;</span> <span class="na">p=</span><span class="s">&quot;880.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;954556&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343058&quot;</span> <span class="na">c=</span><span class="s">&quot;8686FF&quot;</span> <span class="na">dn=</span><span class="s">&quot;680å¥ç¥¨åº&quot;</span> <span class="na">p=</span><span class="s">&quot;680.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;954557&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;345793&quot;</span> <span class="na">c=</span><span class="s">&quot;EAAE33&quot;</span> <span class="na">dn=</span><span class="s">&quot;680&quot;</span> <span class="na">p=</span><span class="s">&quot;680.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;1115113&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343059&quot;</span> <span class="na">c=</span><span class="s">&quot;8ac4e3&quot;</span> <span class="na">dn=</span><span class="s">&quot;480&quot;</span> <span class="na">p=</span><span class="s">&quot;480.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;954558&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ch</span> <span class="na">id=</span><span class="s">&quot;343060&quot;</span> <span class="na">c=</span><span class="s">&quot;bf6aa2&quot;</span> <span class="na">dn=</span><span class="s">&quot;280&quot;</span> <span class="na">p=</span><span class="s">&quot;280.00&quot;</span> <span class="na">dmpgid=</span><span class="s">&quot;954559&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/AllPrice&gt;</span>
</span><span class='line'><span class="nt">&lt;tplist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tp</span> <span class="na">id=</span><span class="s">&quot;79625&quot;</span> <span class="na">nm=</span><span class="s">&quot;1000(680X2)&quot;</span> <span class="na">p=</span><span class="s">&quot;1000&quot;</span> <span class="na">num=</span><span class="s">&quot;2&quot;</span> <span class="na">pots=</span><span class="s">&quot;1&quot;</span> <span class="na">olsl=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;343058&quot;</span> <span class="na">num=</span><span class="s">&quot;2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tp&gt;</span>
</span><span class='line'><span class="nt">&lt;/tplist&gt;</span>
</span><span class='line'><span class="nt">&lt;floors&gt;</span>
</span><span class='line'>    <span class="nt">&lt;f</span> <span class="na">n=</span><span class="s">&quot;é¦å±çå°&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;f</span> <span class="na">n=</span><span class="s">&quot;ä¸å±çå°&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;f</span> <span class="na">n=</span><span class="s">&quot;4å¥å£ VIPåº&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/floors&gt;</span>
</span><span class='line'><span class="nt">&lt;areas&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">&quot;326717&quot;</span> <span class="na">nm=</span><span class="s">&quot;1å·é¨ 101éé&quot;</span> <span class="na">mxc=</span><span class="s">&quot;EF8686&quot;</span> <span class="na">zb=</span><span class="s">&quot;212,433|216,408|222,377|231,325|275,325|275,358|275,392|275,433|245,433&quot;</span> <span class="na">pis=</span><span class="s">&quot;343057,343058,345793&quot;</span> <span class="na">zh=</span><span class="s">&quot;0&quot;</span> <span class="na">angel=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   ...
</span><span class='line'><span class="nt">&lt;/areas&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出来这是个标准的XML（编码因为burpsuite中文支持问题）。其中有趣的信息是<strong>areas</strong>标签的内容，目测表示的是选座中分的区域，其中的<strong>id</strong>就是后面要用的<strong>:name</strong>。</p>

<h3>StandData</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>326717,1|326718,1|326719,1|326720,1|326721,1|326722,1|326723,0|326724,0|326725,1|326726,1|326727,1|326728,1|326729,1|326730,1|326731,0|326735,1|326736,1|326737,0|326745,0|326753,0|326755,1|326757,1|326759,1|326760,1|326761,1|326762,1|326763,1|326764,1|326765,1|326766,0|326767,0|326768,1|326772,1
</span></code></pre></td></tr></table></div></figure>


<p>有了上面的standlist数据这个就好猜了，格式为<code>pid,[01]</code>，猜测后面的0/1表示的是该区域是否卖完。</p>

<h3>:name.txt</h3>

<p>这个数据应该是里面最难的了，返回的是字节数据（byte array)。不过本博客的名字就叫<strong>bytes and bits</strong>，那怎么能放过它呢。详细的信息请参考part2。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>00000000  16 d2 d1 09 61 01 83 c2  08 0a                    |....a.....|
</span><span class='line'>0000000a  ....
</span></code></pre></td></tr></table></div></figure>


<h3>Interface.aspx</h3>

<p>这个请求是紧接着上面的<em>:name.txt</em>的，所以肯定是该区域内座位当前的状况。该数据也是字节。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>00000000  3a 06 d2 09 00 00 00 00  00 00                    |:.........|
</span><span class='line'>0000000a
</span></code></pre></td></tr></table></div></figure>


<p>如果记住后面的请求shopping.damai.cn的下订单的地址参数的话，可以看到前4个byte组成的int跟sid非常接近。</p>

<h3>iseatinfo.aspx</h3>

<p>这个请求的返回非常简单，格式为<code>\d,\d</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>2,0
</span></code></pre></td></tr></table></div></figure>


<p>猜测，后面那个就是当前正在抢这张票的人数。</p>

<h3>setorder.aspx</h3>

<p>到这里就直接跳转页面了，所以主要是研究该请求的参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>http://shopping.damai.cn/eticket/setorder.aspx?cid=852<span class="err">&amp;</span>%5Fm=815184b0a77d5bc658508a486dd3640e<span class="err">&amp;</span>pid=177988<span class="err">&amp;</span>sid=164745800<span class="err">&amp;</span>os=<span class="err">&amp;</span>pptid=NaN<span class="err">&amp;</span>dj=0
</span></code></pre></td></tr></table></div></figure>


<p>这里面<strong>cid</strong>就是前面用到的<strong>cid</strong>,有说是companyId也有说是cityID的，反正知道就行，到底是啥不重要。</p>

<p>这里有意思的是<strong>%5Fm</strong>那个参数，urldecode后就是<strong>_m</strong>参数。如果对hash很熟悉的话，看起来就很像是md5。不过我试过直接将<strong>sid</strong>进行md5sum，但是结果不同。看来是在Flash中加入的些什么。</p>

<h2>预告</h2>

<p>写了一个解析:name.txt内容的程序。地址在<a href="https://github.com/liaowang11/damai-data-parse">damai-data-parse</a>。</p>

<p>准备在程序中加入请求等内容。目前解析出来的结果，简单表示出来就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>XXXOOXXOOXXOOOOXXOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOXXOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOOOOOOOOOOOOOO
</span><span class='line'>OOOOOOOOOOOOXXOOOOOOOOOOO
</span><span class='line'>XXOOOOOOOOOOOOOOOOOOOOO
</span></code></pre></td></tr></table></div></figure>


<p>很像座位图吧？</p>

<h2>小结</h2>

<p>由于bytearray的格式很难猜出来，看来这种<strong>dynamic analysis</strong>（我自己取的名字，类似于reverse程序时候的调试）的方式不太可行。所以，我后来又将选座的Flash对应的swf文件进行了反编译（对应的swf还不是那么容易取到的）。详情，请见下回分解。</p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js"></script>


<script src="https://github.com/liaowang11/js-sequence-diagrams/raw/master/sequence-diagram-min.js"></script>


<script src="http://liaowang11.github.com/javascripts/codes/damai_xuanzuo_flowchart.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just love mayday]]></title>
    <link href="http://liaowang11.github.com/blog/2013/03/19/just-love-mayday/"/>
    <updated>2013-03-19T09:59:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/03/19/just-love-mayday</id>
    <content type="html"><![CDATA[<h2>抢票攻略</h2>

<p>分析了一下昨天北京场的网站结构,Flash部分就没看了。总之，第一时间获取到选座地址是最重要的。</p>

<h3>前提</h3>

<ol>
<li>选座地址不需要答题就可以进入，并且没有验证是否答题的机制。</li>
<li>答题那太水了，2道题4个问 选8次好歹也进去了吧（如果你够背）。这里的验证全用的Javascript，答案都存在JSON里。所以，完全可以无视。</li>
</ol>


<h3>熟悉流程</h3>

<p>一般抢<a href="http://damai.cn">大麦</a>的票的流程是:</p>

<pre><code>票信息地址 -》 点免费 -》 点选座 -》 答题 -》 选座
</code></pre>

<p>我把能省略的都尽量省略了，只需要</p>

<pre><code>票信息地址 -》 选座
</code></pre>

<p>这里两个Id比较重要：<strong>TicketId</strong>（也叫<strong>ProjectID</strong>)和<strong>PerformID</strong>。</p>

<p>我们要首先取到的就是后者。因为选座的地址是 http://seat.damai.cn/xuanzuo/187617</p>

<pre><code>http://seat.damai.cn/xuanzuo/:PerformId
</code></pre>

<p>简单来说就是(如果没有curl，就只有用浏览器打开，查看源代码，然后搜索performid了）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s http://www.damai.cn/ticket_47576.html | grep -i -o -P <span class="s1">&#39;performid=(\d+)&#39;</span>
</span><span class='line'><span class="nv">performID</span><span class="o">=</span>187617
</span><span class='line'>firefox http://seat.damai.cn/xuanzuo/187617
</span></code></pre></td></tr></table></div></figure>


<h3>准备充分</h3>

<ol>
<li>务必先进选座那地址，把Flash程序缓存了，那个下载很慢。</li>
<li>抢到速度下单，结账。</li>
<li><del>好像没有3了。。</del>一定要先登录啊！像这种statefull的网站，瓶颈之一就是存储在服务器端的sessionID。先登录上，把session拿下。</li>
<li>身份证号什么的，先打出来到时候复制粘贴。</li>
</ol>


<h2>GoodLuck</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sina OAuth]]></title>
    <link href="http://liaowang11.github.com/blog/2013/03/15/sina-oauth/"/>
    <updated>2013-03-15T23:14:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/03/15/sina-oauth</id>
    <content type="html"><![CDATA[<p>Recently, I read a post about <a href="http://www.nirgoldshlager.com/2013/02/how-i-hacked-facebook-oauth-to-get-full.html">Facebook Oauth Flaws</a>. The post is
interesting, so I can&#8217;t resist to give it a try on some other services
leveraging Oauth. And the most popular one in China should undoubtedly
be <a href="http://weibo.com">Sina Weibo</a>.</p>

<h2>Sina Weibo Oauth</h2>

<p>The entry point to oauth can be located at
<a href="https://api.weibo.com/oauth2">here</a>. The developer center gave a
overview of the oauth workflow.</p>

<p><img src="http://www.sinaimg.cn/blog/developer/wiki/oAuth2_02.gif" alt="Oauth code authentication flow" /></p>

<h2>Insite App Authentication</h2>

<p>Take <a href="http://apps.weibo.com/guanjia">guanjia</a> as an example. The
authentication url is here:</p>

<p><a href="https://api.weibo.com/oauth2/authorize?response_type=token&amp;client_id=1567453627&amp;redirect_uri=http%3A%2F%2Fapps.weibo.com/guanjia">https://api.weibo.com/oauth2/authorize?response_type=token&amp;client_id=1567453627&amp;redirect_uri=http%3A%2F%2Fapps.weibo.com/guanjia</a></p>

<h3>Ass Kicked</h3>

<p>After I read the Oauth Protocol, I tried very hard to find the access
token return by posting to the <strong>redirect_uri</strong>. But the response
return after confirm the authentication is merely a line of
javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span><span class="nx">top</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://apps.weibo.com/guanjia&quot;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no <strong>Access Token</strong>! What the hell.</p>

<p>Later on, I discovered because this is an insite app, which sharing
the same domain as apps.weibo.com. That is to say the page is still
returned by Sina, not posting to <strong>redirect_uri</strong>.</p>

<p>At last, an <code>iframe</code> embedded in that page is the real page get posted
to. The <strong>Access Token</strong> is named <strong>signed_request</strong>.</p>

<h3>Format</h3>

<p><a href="https://api.weibo.com/oauth2/authorize?response_type=token&amp;client_id=1567453627&amp;redirect_uri=http%3A%2F%2Fapps.weibo.com/guanjia">https://api.weibo.com/oauth2/authorize?response_type=token&amp;client_id=1567453627&amp;redirect_uri=http%3A%2F%2Fapps.weibo.com/guanjia</a></p>

<p>The <strong>client_id</strong> in the url is unique to every app. You have to
register a developer account and propose to get your app&amp;secret key and
get assigned a <strong>client_id</strong>.</p>

<p>What we are focusing here is <strong>redirect_uri</strong> which the essence of
<a href="http://www.nirgoldshlager.com/2013/02/how-i-hacked-facebook-oauth-to-get-full.html">Nir Goldshlager</a> article. The problem about
<a href="http://www.facebook.com">Facebook</a> is that it does not check enough
or maybe potentially omitted it&#8217;s own subdomain.</p>

<h3>Sina Offical Apps</h3>

<p>I checked the url above, but actually didn&#8217;t found the same issue.
IMHO, sina official apps are treated totally different, each owning a
different subdomain. And redirecting to the subdomains doesn&#8217;t work,
which result in a very obvious error:</p>

<blockquote><p>error:redirect_uri_mismatch</p></blockquote>

<h2>Findings</h2>

<p>A follow-up post about <a href="http://www.nirgoldshlager.com/2013/03/how-i-hacked-any-facebook-accountagain.html">Facebook Oauth</a> stated that facebook fixed
the problem by fixing or using regular expression matching. It&#8217;s easy
to see Sina also uses regular expression to check the
<strong>redirect_uri</strong>.</p>

<p>What I found out are:</p>

<ol>
<li>Numbers are not checked. That is to say appending numbers to the
url passes the check and the page get redirect to an error page, which
in most circumstances cannot be found. But I don&#8217;t think Sina will
approve a new app name which is mostly the same with another.:)</li>
<li>In fact, at first I&#8217;m not so familiar with <a href="http://tools.ietf.org/html/rfc6749">OAuth Protocol</a>. In
sum, the flows examined here is not as severe as I thought. When
requesting access to resources, it needs to provide <strong>app secret_id</strong>
as well as the <strong>access token</strong>. The two are tied. So even if one can manage to steal
your <strong>access token</strong>, without <strong>secret_id</strong> it poses no threats.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ender.js vs Jquery.js]]></title>
    <link href="http://liaowang11.github.com/blog/2012/01/05/new-post/"/>
    <updated>2012-01-05T23:59:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2012/01/05/new-post</id>
    <content type="html"><![CDATA[<blockquote><p>Happy new year, guys.
Never ask me about the scrollbar on my blog. I just don&#8217;t know why it&#8217;s color looks like this. :)</p></blockquote>

<p>Anyway.</p>

<p>I like <a href="http://bottlepy.org/docs/dev/" title="From Bottle">sidelegend</a> alike effects so much. So I just plagiarized from Bottle.</p>

<p>But, oops. The octopress used library <a href="http://ender.no.de/%20A%20brief%20intro">Ender.js</a> which just overwrite the <em>$</em>.</p>

<p>So, I plan to port(maybe should use such a big verb) <em>sidelegend</em>.</p>

<p>No big job, not a lot of codes.</p>

<p>I will post the code to my <a href="https://github.comm/liaowang11"> github </a>.</p>

<h2 id="Done">
<a class="headerlink"></a>Ok, It&#8217;s done.
</h2>


<p>check out <a href="https://github.com/liaowang11/sidelegend">sidelegend</a>.</p>

<p>BTW, it&#8217;s really easy to get confused about <strong>$(this)</strong> and <strong>this</strong>.</p>

<p>Next time, tell you some thing about <em>Microsoft Asia Research</em>..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# starter]]></title>
    <link href="http://liaowang11.github.com/blog/2011/11/30/f-number-starter/"/>
    <updated>2011-11-30T19:30:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2011/11/30/f-number-starter</id>
    <content type="html"><![CDATA[<p>Recently, i&#8217;m so absorbed in Haskell and tried hard to understand the <a href="http://www.scs.stanford.edu/11au-cs240h/">lectures from stanford</a>.
I like Haskell, I have to say. It seems to make things more obvious and safe to do. Though, sometimes the high level abstraction may kill your guts.</p>

<p>While interested in functional programming, I start reading &#8220;Lambda-Calculus and Combinators, an Introduction&#8221; by J.Roger Hindley, which is recommended by <a href="http://matt.might.net/#teaching">Matt Might</a>. He is a such a teacher, though I never got the privilege to be his students. :)</p>

<p>So here, with win$ platform, F# seems to be the best language to study and also recommended a lot on StackOverFlow for someone who is familiar with .NET.
This post is just for recording my learning experience with this language.</p>

<h2 id="intro">
Introduction
<a class="headerlink" href="#intro"></a>
</h2>


<p>Just a brief overview of this language. F# is often compared with Ocaml</p>
]]></content>
  </entry>
  
</feed>
