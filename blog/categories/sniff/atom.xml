<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sniff | Bits and Bytes]]></title>
  <link href="http://liaowang11.github.com/blog/categories/sniff/atom.xml" rel="self"/>
  <link href="http://liaowang11.github.com/"/>
  <updated>2013-03-27T12:15:07+08:00</updated>
  <id>http://liaowang11.github.com/</id>
  <author>
    <name><![CDATA[wliao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diving Into Damai.cn-Part2]]></title>
    <link href="http://liaowang11.github.com/blog/2013/03/27/diving-into-damai-dot-cn-part2/"/>
    <updated>2013-03-27T11:25:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/03/27/diving-into-damai-dot-cn-part2</id>
    <content type="html"><![CDATA[<p>上篇<a href="/blog/2013/03/25/diving-into-damai-dot-cn-part1/">博文</a>中说了用Burp Suite分析选票的流程。分析发送请求和接收回复在单纯的HTTP环境中往往足够了。剩下的就只有依靠deobfuscate页面中的JS代码了，因为一般没办法知道服务器端的代码（除非你特别黑）。</p>

<p>对于大麦选票来说，它用了Flash来增强用户体验。所以这里我们需要分析Flash代码而不是JS代码。</p>

<h1>Reverse SWF</h1>

<p>ActionScript是出了名的容易被反编译。所以大家也想了很多办法来<a href="http://active.tutsplus.com/tutorials/workflow/protect-your-flash-files-from-decompilers-by-using-encryption/">防止被反编译</a>。好在大麦只用了前面这篇文章中说到的第一步，就是采用动态加载的方式来载入真正的SWF文件。</p>

<h2>Reversing Tools</h2>

<p>好久没接触到Flash方面的东西，高中时用过的<a href="http://www.sothink.com/">硕思</a>没想到还发展得不错。另外比较出名的是<a href="http://www.buraks.com/asv/">AVS</a>。</p>

<p>不过可惜都是要钱的。我们这种穷学生是买不起的。</p>

<p>最后我选择了用sothink试用版（30天）来阅读部分代码，然后用<a href="http://www.showmycode.com/">showmycode</a>来dump代码。在了解了大概后，直接阅读showmycode给出的代码就更简单了。</p>

<h2>How to?</h2>

<p>实际的unpack方法是依照<a href="http://blog.codestage.ru/2012/03/07/packed/">Packed SWF. How to unpack?</a>中的dynamic unpacking。不过在Win$下有<a href="http://winhex.com/winhex/">WinHex</a>之类的神器，Linux可就没有了。</p>

<p>解压后SWF头由FWS+1byte（估计是版本号）+4byte长度组成：
<code>
0d08c090 46 57 53 0b 6f 33 02 00  |FWS.o3...|
</code></p>

<p>这里就有两种办法了：</p>

<ol>
<li>写程序读/proc/$pid/mem内容：需要参考/proc/$pid/maps中的内存映射关系，太复杂。。。</li>
<li>既然我们只是要找到内存中unpack过后的swf文件，倒不如直接把整个程序的内存全dump出来找。</li>
</ol>


<p>我这种懒人肯定选第二种方法了。</p>

<p>具体过程：
<code>bash
$ ps ax | grep plugin-container
22249 ?        Sl     1:47 /usr/lib/firefox/plugin-container /opt/mint-flashplugin-11/libflashplayer.so -greomni /usr/lib/firefox/omni.ja 22179 true plugin
$ gcore -o flash_plugin.dump 22249
</code>
gcore隶属于gdb。这里将程序的plugin-container（firefox载入插件时用到的）的全部内存dump到flash_plugin.dump。</p>

<p>该内存中肯定有很多unpack的swf文件，前面的文章中只是说一个一个来。太浪费时间了。既然我们已经知道目标了，为何不先试着搜索些关键字，SWF头地址应该在这些关键字的前面，而且范围包括了这些关键字搜索结果。</p>

<p><code>bash
$ hexdump -C flash_plugin.dump.22249 | grep damai
04157890  91 ef bc 88 77 77 77 2e  64 61 6d 61 69 2e 63 6e  |....www.damai.cn|
041578c0  91 ef bc 88 77 77 77 2e  64 61 6d 61 69 2e 63 6e  |....www.damai.cn|
061d1e70  3a 2f 2f 73 65 61 74 2e  64 61 6d 61 69 2e 63 6e  |://seat.damai.cn|
061f43b0  64 61 6d 61 69 2e 63 6e  00 00 91 00 91 00 00 00  |damai.cn........|
0c7c44a0  65 61 74 2e 64 61 6d 61  69 2e 63 6e 2f 52 65 73  |eat.damai.cn/Res|
0c7c49f0  73 65 61 74 2e 64 61 6d  61 69 2e 63 6e 2f 52 65  |seat.damai.cn/Re|
0ca962e0  65 61 74 2e 64 61 6d 61  69 2e 63 6e 2f 52 65 73  |eat.damai.cn/Res|
0ca96320  65 61 74 2e 64 61 6d 61  69 2e 63 6e 2f 52 65 73  |eat.damai.cn/Res|
0cfae580  4f 76 65 72 31 36 00 00  63 6e 2e 64 61 6d 61 69  |Over16..cn.damai|
0cfae610  70 00 31 00 31 00 00 00  63 6e 2e 64 61 6d 61 69  |p.1.1...cn.damai|
0d095360  2e 64 61 6d 61 69 2e 63  6f 6d 70 6f 6e 65 6e 74  |.damai.component|
0d095380  64 61 6d 61 69 2e 65 76  65 6e 74 0d 4c 6f 61 64  |damai.event.Load|
0d0954e0  6f 61 64 65 72 0e 63 6e  2e 64 61 6d 61 69 2e 6d  |oader.cn.damai.m|
0d095500  6e 2e 64 61 6d 61 69 2e  76 6f 0b 53 74 61 6e 64  |n.damai.vo.Stand|
0d095560  6e 66 6f 56 6f 16 63 6e  2e 64 61 6d 61 69 2e 63  |nfoVo.cn.damai.c|
0d095c10  6e 2e 64 61 6d 61 69 2e  63 6f 6d 70 6f 6e 65 6e  |n.damai.componen|
0d095c90  61 73 18 63 6e 2e 64 61  6d 61 69 2e 63 6f 6d 70  |as.cn.damai.comp|
0d095ed0  65 1c 63 6e 2e 64 61 6d  61 69 2e 63 6f 6d 70 6f  |e.cn.damai.compo|
0d096030  61 67 65 18 63 6e 2e 64  61 6d 61 69 2e 63 6f 6e  |age.cn.damai.con|
0d0960c0  63 6e 2e 64 61 6d 61 69  2e 63 6f 6d 70 6f 6e 65  |cn.damai.compone|
</code></p>

<p>搜索damai，结果很多（上面省略了很多）。就算没用过ActionScript，程序员屌丝看到<strong>damai.component</strong>,<strong>damai.event.Load</strong>之类也应该猜到时namespace了。所以程序应该在地址<code>0x0d095360</code>之前。</p>

<p>再次搜索FWS：</p>

<p><code>bash
$ hexdump -C flash_plugin.dump.22249 | grep FWS
0caed090  0c 00 01 00 00 00 00 00  46 57 53 07 e2 07 00 00  |........FWS.....|
0cc18090  00 00 00 00 00 00 00 00  46 57 53 0a f1 0d 00 00  |........FWS.....|
0cca9090  20 62 02 c0 00 00 00 00  46 57 53 0b 27 36 01 00  | b......FWS.'6..|
0cecc090  07 00 00 00 00 00 00 00  46 57 53 07 e2 07 00 00  |........FWS.....|
0d08c090  00 00 00 00 00 00 00 00  46 57 53 0b 6f 33 02 00  |........FWS.o3..|
0d46e360  95 cc 01 00 08 00 00 00  46 57 53 0f 95 cc 01 00  |........FWS.....|
0d659090  00 00 00 00 00 00 00 00  46 57 53 0f 95 cc 01 00  |........FWS.....|
0e6aae90  fa d4 48 ff 48 d5 48 ff  46 57 53 08 af 10 00 00  |..H.H.H.FWS.....|
0e6adaf0  b3 5e 52 ff 46 57 53 08  00 00 00 00 00 46 57 53  |.^R.FWS......FWS|
0e6adb00  07 00 00 00 00 00 46 57  53 06 00 00 00 00 00 46  |......FWS......F|
0e6adf70  68 6d 65 6e 74 00 46 57  53 00 43 57 53 00 5a 57  |hment.FWS.CWS.ZW|
0e6b0f90  00 00 00 00 00 00 00 00  46 57 53 08 eb 9c 00 00  |........FWS.....|
10bd3130  94 45 34 46 57 53 7e 07  e6 7c ae 99 cd 1b 3b 43  |.E4FWS~..|....;C|
</code></p>

<p><code>0x0d095360</code>之前的比较靠近的应该是<code>0x0d08c090</code>吧。</p>

<p>现在我们需要把从<code>0x0d08c098</code>（看FWS的位置哦）开始，<code>0x02336f=144239</code>bytes的数据单独拷贝出来。</p>

<p>一句话攻略：
<code>bash
xxd -l 144239 -s 0xd08c098 flash_plugin.dump.22249 | xxd -r -seek -0xd08c098 -a &gt; may.swf
</code></p>

<p>这里得到的may.swf应该就是我们需要分析的SWF文件了。</p>

<h2>小结</h2>

<p>本来打算写两部分够了，但是Flash代码部分画FlowChart没找到喜欢的工具，所以先暂且到这儿吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diving Into Damai.cn-Part1]]></title>
    <link href="http://liaowang11.github.com/blog/2013/03/25/diving-into-damai-dot-cn-part1/"/>
    <updated>2013-03-25T18:29:00+08:00</updated>
    <id>http://liaowang11.github.com/blog/2013/03/25/diving-into-damai-dot-cn-part1</id>
    <content type="html"><![CDATA[<p>这几天花了些时间来研究大麦购票的流程，虽然现在也没啥意义。下面仅当记录和分享用。</p>

<h2>方法</h2>

<p>为了实现automated qiangpiao（好高级的英文），我们需要了解整个流程，而不是<a href="http://wliao.name/blog/2013/03/19/just-love-mayday/">简单的到选座的网站</a>就OK了。但是选座是用ActionScript写的，所以这里就有两个选择了。</p>

<ol>
<li>嗅探（Sniff不知道算不算）客户端与服务器端通信（HTTP协议）的内容，然后连蒙带猜搞懂流程和数据。</li>
<li>反编译Flash，分析代码。</li>
</ol>


<p>这个Post说的是第一种，第二种请见Part2。</p>

<h2>工具</h2>

<p>刚开始很困惑用什么工具来进行嗅探。Chrome Developer Tools 只能显示页面的请求和回复，而tcpdump貌似又有点太<del>高端</del>底层了。</p>

<p>最近无意间想起了BackTrace上的<a href="http://portswigger.net/burp/">burp suite</a>，这可是传说中的神器，而且还能跨平台。详细使用就读它的<a href="http://portswigger.net/burp/help/">help</a>吧。我使用的Free版本的，够用就行。Win$ 32bit下的孩子可以去找那个啥版本的（你懂的）。</p>

<p><img src="/images/burpfordamai.png" alt="Burp to Sniff Damai" /></p>

<h2>流程</h2>

<p>如下的流程都是用Burp的Interrupt On模式分析所得，动手是最快的熟悉方法。</p>

<div id="xuanzuo_flow" style="margin:auto"></div>


<h2>数据</h2>

<p><blockquote><p>"Bad programmers worry about the code. Good programmers worry about data structures and their relationships."</p><footer><strong>Linus Torvalds</strong> <cite><a href='http://lwn.net/Articles/193245/'>Good Programmer, Bad Programmer</a></cite></footer></blockquote></p>

<h3>standlist.xml</h3>

<p>``` xml
&lt;?xml version="1.0" encoding="utf-8"?>
<root rs="StandImage/852/177988/performbg.jpg" fbg="" snb="1" vn="ä¸äºè¾¾ä¸­å¿ï¼åäºæ£µæ¾ä½è²é¦ï¼" pfid="177988">
<prices></p>

<pre><code>&lt;ch id="343056" c="F91616" dn="1280" p="1280.00"/&gt;
&lt;ch id="343057" c="EF8686" dn="880" p="880.00"/&gt;
&lt;ch id="343058" c="8686FF" dn="680å¥ç¥¨åº" p="680.00"/&gt;
&lt;ch id="345793" c="EAAE33" dn="680" p="680.00"/&gt;
&lt;ch id="343059" c="8ac4e3" dn="480" p="480.00"/&gt;
&lt;ch id="343060" c="bf6aa2" dn="280" p="280.00"/&gt;
</code></pre>

<p></prices>
<AllPrice></p>

<pre><code>&lt;ch id="343056" c="F91616" dn="1280" p="1280.00" dmpgid="954555"/&gt;
&lt;ch id="343057" c="EF8686" dn="880" p="880.00" dmpgid="954556"/&gt;
&lt;ch id="343058" c="8686FF" dn="680å¥ç¥¨åº" p="680.00" dmpgid="954557"/&gt;
&lt;ch id="345793" c="EAAE33" dn="680" p="680.00" dmpgid="1115113"/&gt;
&lt;ch id="343059" c="8ac4e3" dn="480" p="480.00" dmpgid="954558"/&gt;
&lt;ch id="343060" c="bf6aa2" dn="280" p="280.00" dmpgid="954559"/&gt;
</code></pre>

<p></AllPrice>
<tplist></p>

<pre><code>&lt;tp id="79625" nm="1000(680X2)" p="1000" num="2" pots="1" olsl="0"&gt;
    &lt;p id="343058" num="2"/&gt;
&lt;/tp&gt;
</code></pre>

<p></tplist>
<floors></p>

<pre><code>&lt;f n="é¦å±çå°"/&gt;
&lt;f n="ä¸å±çå°"/&gt;
&lt;f n="4å¥å£ VIPåº"/&gt;
</code></pre>

<p></floors>
<areas></p>

<pre><code>&lt;a id="326717" nm="1å·é¨ 101éé" mxc="EF8686" zb="212,433|216,408|222,377|231,325|275,325|275,358|275,392|275,433|245,433" pis="343057,343058,345793" zh="0" angel="0"/&gt;
</code></pre>

<p>   ...
</areas>
</root>
```</p>

<p>可以看出来这是个标准的XML（编码因为burpsuite中文支持问题）。其中有趣的信息是<strong>areas</strong>标签的内容，目测表示的是选座中分的区域，其中的<strong>id</strong>就是后面要用的<strong>:name</strong>。</p>

<h3>StandData</h3>

<p><code>
326717,1|326718,1|326719,1|326720,1|326721,1|326722,1|326723,0|326724,0|326725,1|326726,1|326727,1|326728,1|326729,1|326730,1|326731,0|326735,1|326736,1|326737,0|326745,0|326753,0|326755,1|326757,1|326759,1|326760,1|326761,1|326762,1|326763,1|326764,1|326765,1|326766,0|326767,0|326768,1|326772,1
</code>
有了上面的standlist数据这个就好猜了，格式为<code>pid,[01]</code>，猜测后面的0/1表示的是该区域是否卖完。</p>

<h3>:name.txt</h3>

<p>这个数据应该是里面最难的了，返回的是字节数据（byte array)。不过本博客的名字就叫<strong>bytes and bits</strong>，那怎么能放过它呢。详细的信息请参考part2。
<code>
00000000  16 d2 d1 09 61 01 83 c2  08 0a                    |....a.....|
0000000a  ....
</code></p>

<h3>Interface.aspx</h3>

<p>这个请求是紧接着上面的<em>:name.txt</em>的，所以肯定是该区域内座位当前的状况。该数据也是字节。
<code>
00000000  3a 06 d2 09 00 00 00 00  00 00                    |:.........|
0000000a
</code>
如果记住后面的请求shopping.damai.cn的下订单的地址参数的话，可以看到前4个byte组成的int跟sid非常接近。</p>

<h3>iseatinfo.aspx</h3>

<p>这个请求的返回非常简单，格式为<code>\d,\d</code>。
<code>
2,0
</code>
猜测，后面那个就是当前正在抢这张票的人数。</p>

<h3>setorder.aspx</h3>

<p>到这里就直接跳转页面了，所以主要是研究该请求的参数。
<code>
http://shopping.damai.cn/eticket/setorder.aspx?cid=852&amp;%5Fm=815184b0a77d5bc658508a486dd3640e&amp;pid=177988&amp;sid=164745800&amp;os=&amp;pptid=NaN&amp;dj=0
</code>
这里面<strong>cid</strong>就是前面用到的<strong>cid</strong>,有说是companyId也有说是cityID的，反正知道就行，到底是啥不重要。</p>

<p>这里有意思的是<strong>%5Fm</strong>那个参数，urldecode后就是<strong>_m</strong>参数。如果对hash很熟悉的话，看起来就很像是md5。不过我试过直接将<strong>sid</strong>进行md5sum，但是结果不同。看来是在Flash中加入的些什么。</p>

<h2>预告</h2>

<p>写了一个解析:name.txt内容的程序。地址在<a href="https://github.com/liaowang11/damai-data-parse">damai-data-parse</a>。</p>

<p>准备在程序中加入请求等内容。目前解析出来的结果，简单表示出来就是：
<code>
XXXOOXXOOXXOOOOXXOO
XXOOOOOOOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOXXOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOXXOOOOOOOOOOO
XXOOOOOOOOOOOOOOOOOOOOO
</code>
很像座位图吧？</p>

<h2>小结</h2>

<p>由于bytearray的格式很难猜出来，看来这种<strong>dynamic analysis</strong>（我自己取的名字，类似于reverse程序时候的调试）的方式不太可行。所以，我后来又将选座的Flash对应的swf文件进行了反编译（对应的swf还不是那么容易取到的）。详情，请见下回分解。</p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js"></script>


<script src="https://github.com/liaowang11/js-sequence-diagrams/raw/master/sequence-diagram-min.js"></script>


<script src="http://liaowang11.github.com/javascripts/codes/damai_xuanzuo_flowchart.js"></script>

]]></content>
  </entry>
  
</feed>
